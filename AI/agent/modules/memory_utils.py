import json
import os
from typing import List, Dict, Any
import numpy as np
from datetime import datetime
from pathlib import Path
import gensim.downloader as api
from numpy import dot
from numpy.linalg import norm

class MemoryUtils:
    def __init__(self):
        # ÌòÑÏû¨ ÌååÏùºÏùò Ï†àÎåÄ Í≤ΩÎ°úÎ•º Í∏∞Ï§ÄÏúºÎ°ú ÏÉÅÏúÑ ÎîîÎ†âÌÜ†Î¶¨ Ï∞æÍ∏∞
        current_dir = Path(__file__).parent
        root_dir = current_dir.parent.parent  # AI ÎîîÎ†âÌÜ†Î¶¨
        agent_dir = root_dir / "agent"
        data_dir = agent_dir / "data"
        
        self.memories_file = str(data_dir / "memories.json")
        self.plans_file = str(data_dir / "plans.json")
        self.reflections_file = str(data_dir / "reflections.json")
        
        # Word2Vec Î™®Îç∏ Ï¥àÍ∏∞Ìôî
        print("ü§ñ Word2Vec Î™®Îç∏ Î°úÎî© Ï§ë...")
        self.model = api.load('word2vec-google-news-300')
        print("‚úÖ Word2Vec Î™®Îç∏ Î°úÎî© ÏôÑÎ£å")
        
        self._ensure_files_exist()

    def _ensure_files_exist(self):
        """ÌïÑÏöîÌïú JSON ÌååÏùºÎì§Ïù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏ÌïòÍ≥†, ÏóÜÎã§Î©¥ ÏÉùÏÑ±"""
        for file_path in [self.memories_file, self.plans_file, self.reflections_file]:
            if not os.path.exists(file_path):
                os.makedirs(os.path.dirname(file_path), exist_ok=True)
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump({"John": [], "Sarah": []}, f, ensure_ascii=False, indent=2)

    def _load_memories(self) -> Dict[str, List[Dict[str, Any]]]:
        """Î©îÎ™®Î¶¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú"""
        try:
            with open(self.memories_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"Î©îÎ™®Î¶¨ Î°úÎìú Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")
            return {"John": [], "Sarah": []}

    def _save_memories(self, memories: Dict[str, List[Dict[str, Any]]]):
        """Î©îÎ™®Î¶¨ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•"""
        try:
            with open(self.memories_file, 'w', encoding='utf-8') as f:
                json.dump(memories, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"Î©îÎ™®Î¶¨ Ï†ÄÏû• Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")

    def save_memory(self, event_sentence: str, embedding: List[float], event_time: str, agent_name: str):
        """ÏÉàÎ°úÏö¥ Î©îÎ™®Î¶¨ Ï†ÄÏû•"""
        memories = self._load_memories()
        
        if agent_name not in memories:
            memories[agent_name] = []
            
        memory = {
            "event": event_sentence,
            "time": event_time,
            "importance": "normal",
            "embeddings": embedding
        }
        
        memories[agent_name].append(memory)
        self._save_memories(memories)

    def get_embedding(self, text: str) -> List[float]:
        """
        ÌÖçÏä§Ìä∏Î•º ÏûÑÎ≤†Îî© Î≤°ÌÑ∞Î°ú Î≥ÄÌôò
        
        Args:
            text: ÏûÑÎ≤†Îî©Ìï† ÌÖçÏä§Ìä∏
        
        Returns:
            List[float]: ÏûÑÎ≤†Îî© Î≤°ÌÑ∞
        """
        # ÌÜ†ÌÅ∞Ìôî Î∞è ÏÜåÎ¨∏Ïûê Î≥ÄÌôò
        tokens = [w.lower() for w in text.split() if w.lower() in self.model]
        
        if not tokens:
            return [0.0] * self.model.vector_size
        
        # Îã®Ïñ¥ Î≤°ÌÑ∞Ïùò ÌèâÍ∑†ÏùÑ Î¨∏Ïû• Î≤°ÌÑ∞Î°ú ÏÇ¨Ïö©
        word_vectors = [self.model[w] for w in tokens]
        sentence_vector = np.mean(word_vectors, axis=0)
        
        # Ï†ïÍ∑úÌôî
        norm = np.linalg.norm(sentence_vector)
        if norm > 0:
            sentence_vector = sentence_vector / norm
            
        return sentence_vector.tolist()

    def event_to_sentence(self, event: Dict[str, Any]) -> str:
        """Ïù¥Î≤§Ìä∏Î•º Î¨∏Ïû•ÏúºÎ°ú Î≥ÄÌôò"""
        event_type = event.get("event_type", "")
        location = event.get("event_location", "")
        object = event.get("object", "")
        
        if event_type == "witness":
            return f"witness {object} at {location}"
        elif event_type == "request":
            return f"request {object} at {location}"
        elif event_type == "feel":
            return f"feel {object} at {location}"
        elif event_type == "discover":
            return f"discover {object} at {location}"
        elif event_type == "new_object_type":
            return f"discover new {object} at {location}"
        elif event_type == "new_area":
            return f"discover new {location} area"
        elif event_type == "preferred_object":
            return f"observe favorite {object} at {location}"
        elif event_type == "agent_observation":
            return f"observe {object} at {location}"
        elif event_type == "new_object":
            return f"discover {object} at {location}"
        else:
            return f"{object} at {location}" 